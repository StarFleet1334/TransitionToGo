
1. Unlike java Go functions do not support method overloading

2. However, they do support variadic arguments, which is one way we can achieve flexibility

3. Pointers must be used explicitly for parameters of basic types to be passed by
    reference.

4. The _ operator is also known as the blank identifier

5. We can use it to ignore return values during assignment

6. if Statements support shorthand variables.
    The variable definition precedes the conditional,
    seperated by a semicolon

7. There is no exception type in Go, and error handling/checking is part of the regular
    program flow

8. Zero value of error type is nil

9. Errors are initialized:
    a) errors.New("msg")
    b) fmt.Errorf("msg:",x)

10. Another way to handle unexpected errors is by forcefully exiting using the panic keyword

11. The defer statement is applied before a function call - for example, defer my func()

12. It delays function execution until the surrounding function finishes

13. In the case of multiple deferred functions, they will be executed on a LIFO (last in,first out)
basis

14. Deferred functions are often used for important cleanup operations.